<?php

/**
 * @file
 * Allows site administrators to create HTML reports on cron run.
 */

use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;

/**
 * Module name.
 */
const HTML_AUDITOR_MODULE_NAME = 'html_auditor';

/**
 * HTML fetch command name - html-fetch.
 */
const HTML_AUDITOR_HTML_FETCH = 'html-fetch';

/**
 * Accessibility audit command name - a11y-audit.
 */
const HTML_AUDITOR_ACCESSIBILITY_AUDIT = 'a11y-audit';

/**
 * HTML5 audit command name - html5-audit.
 */
const HTML_AUDITOR_HTML5_AUDIT = 'html5-audit';

/**
 * Link audit command name - link-audit.
 */
const HTML_AUDITOR_LINK_AUDIT = 'link-audit';

/**
 * Command success message.
 */
const HTML_AUDITOR_SUCCESS_MESSAGE = '%s run successfully.';

/**
 * Implements hook_cron().
 */
function html_auditor_cron() {
  global $base_url;
  // Get html auditor configration.
  $config = \Drupal::config(sprintf('%s.settings', HTML_AUDITOR_MODULE_NAME));
  $file_system = \Drupal::service('file_system');
  $uri = $config->get('sitemap.uri');
  $files = $file_system->realpath((sprintf('public://%s', $config->get('sitemap.files'))));
  $report = $file_system->realpath((sprintf('public://%s', $config->get('sitemap.reports'))));
  // Build --ignore string for a11y.
  $ignore = implode(';', array_filter($config->get('a11y.ignore')));

  // Create new process for html-fetch.
  $process = new Process(sprintf('%s --uri %s --dir %s --map %s',
    HTML_AUDITOR_HTML_FETCH, $uri, $files, $report));
  // Get html-fetch logger.
  $log = \Drupal::logger(HTML_AUDITOR_HTML_FETCH);
  try {
    // Run command.
    $process->mustRun();
    // Log success run.
    $log->info(sprintf(HTML_AUDITOR_SUCCESS_MESSAGE, HTML_AUDITOR_HTML_FETCH));
  }
  catch (ProcessFailedException $e) {
    // Log errors.
    $log->error($process->getErrorOutput());
  }

  // Create new process for a11y-audit.
  $process = new Process(sprintf('%s --path %s --report %s --standard %s --ignore %s',
    HTML_AUDITOR_ACCESSIBILITY_AUDIT, $files, $report, $config->get('a11y.standard'), "'$ignore'"));
  // Get a11y-audit logger.
  $log = \Drupal::logger(HTML_AUDITOR_ACCESSIBILITY_AUDIT);
  try {
    // Run command.
    $process->mustRun();
    // Log success run.
    $log->info(sprintf(HTML_AUDITOR_SUCCESS_MESSAGE, HTML_AUDITOR_ACCESSIBILITY_AUDIT));
  }
  catch (ProcessFailedException $e) {
    // Log errors.
    $log->error($process->getErrorOutput());
  }

  // Create new process for html5-audit.
  $process = new Process(sprintf('%s --path %s --report %s --errors-only %d',
    HTML_AUDITOR_HTML5_AUDIT, $files, $report, $config->get('html5.errors_only')));
  // Get html5-audit logger.
  $log = \Drupal::logger(HTML_AUDITOR_HTML5_AUDIT);
  try {
    // Run command.
    $process->mustRun();
    // Log success run.
    $log->info(sprintf(HTML_AUDITOR_SUCCESS_MESSAGE, HTML_AUDITOR_HTML5_AUDIT));
  }
  catch (ProcessFailedException $e) {
    // Log errors.
    $log->error($process->getErrorOutput());
  }

  // Create new process for link-audit.
  $process = new Process(sprintf('%s --path %s --report %s --report-verbose %d --base-uri %s',
    HTML_AUDITOR_LINK_AUDIT, $files, $report, $config->get('link.report_verbose'), $base_url));
  // Get link-audit logger.
  $log = \Drupal::logger(HTML_AUDITOR_LINK_AUDIT);
  try {
    // Run command.
    $process->mustRun();
    // Log success run.
    $log->info(sprintf(HTML_AUDITOR_SUCCESS_MESSAGE, HTML_AUDITOR_LINK_AUDIT));
  }
  catch (ProcessFailedException $e) {
    // Log errors.
    $log->error($process->getErrorOutput());
  }
}
